{"version":3,"sources":["components/BarChartXAxis.js","components/BarChartYAxis.js","components/BarChart.js","components/GenomePlots.js","components/Legend.js","components/ClinicalSignificance.js","components/Similarity.js","components/MatchTable.js","utils/getDimensions.js","App.js","index.js"],"names":["BarChartXAxis","wrapperWidth","wrapperHeight","xStart","xEnd","yPosition","stepSize","axisObject","axisTitle","d","stroke","strokeWidth","map","value","offset","key","transform","y1","y2","x","className","BarChartYAxis","yStart","yEnd","xPosition","x1","x2","y","BarChart","data","chromosomes","title","pathLevels","colourMap","leftOffset","selectedChrom","margin","top","right","bottom","left","boundsWidth","boundsHeight","chromosomeTotals","sum","l","parseInt","stack","d3","keys","xScale","domain","range","padding","yScale","Math","max","colourRange","t","colourScale","xAxis","c","i","step","yAxis","ticks","width","height","s","strokeDashArray","Chromosome","presentPathLevels","filter","length","bandwidth","ClinicalSignificance","fill","strokeDasharray","GenomePlots","selectedLevels","gosRef","useRef","spec","useMemo","spacing","views","static","layout","centerRadius","tracks","alignment","style","background","backgroundOpacity","url","type","chromosomeField","genomicFields","mark","color","field","linkingId","separator","dataTransform","oneOf","genomicFieldsToConvert","xe","x1e","arrangement","id","tooltip","alt","useEffect","current","api","getViewIds","includes","zoomTo","zoomToExtent","validity","validateGoslingSpec","state","ref","experimental","reactive","console","warn","messages","Legend","categories","Object","hex","result","exec","hexToRgb","r","g","b","backgroundColor","Similarity","pageSelectOptions","label","MatchTable","columns","useTable","disableMultiSort","initialState","pageIndex","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","onClick","disabled","defaultValue","onChange","e","target","Number","options","getDimensions","proportion","calcWidth","window","innerWidth","maxWidthAllowed","maxWidth","concat","chromOptions","chrom","push","Benign","Pathogenic","App","useState","clinvarSummary","setClinvarSummary","matchSummary","setMatchSummary","matchData","setMatchData","setSelectedChrom","setSelectedLevels","tableLoading","setTableLoading","circosWidth","setCircosWidth","barChartDims","setBarChartDims","fetchData","a","variants","v","filteredData","matches","CHROM","handleResize","addEventListener","removeEventListener","sortClinicalSignificance","rowA","rowB","columnId","desc","indexOf","original","sortChromosome","Header","accessor","sortType","disableSortBy","checked","level","newLevels","orderedLevels","sortBy","o","toggleLevelSelected","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e3fbf861.chunk.js","sourcesContent":["import React from \"react\";\n\nconst BarChartXAxis = ({\n  wrapperWidth,\n  wrapperHeight,\n  xStart,\n  xEnd,\n  yPosition,\n  stepSize,\n  axisObject,\n  axisTitle,\n}) => {\n  return (\n    <>\n      {/* axis line */}\n      <path\n        d={`M ${xStart} ${yPosition} H ${xEnd} `}\n        stroke=\"currentColor\"\n        strokeWidth=\"1\"\n      />\n\n      {/* ticks */}\n      {axisObject.map(({ value, offset }) => {\n        return (\n          <g\n            key={value}\n            transform={`translate(${\n              xStart + offset + stepSize * 0.5\n            }, ${yPosition})`}\n          >\n            <line y1=\"0\" y2=\"5\" x={offset} stroke=\"black\" />\n            <text className=\"axis-tick-text x-axis-tick-text\" key={value}>\n              {value}\n            </text>\n          </g>\n        );\n      })}\n\n      {/* axis label */}\n      <text transform={`translate(${wrapperWidth / 2}, ${wrapperHeight})`}>\n        {axisTitle}\n      </text>\n    </>\n  );\n};\n\nexport default BarChartXAxis;\n","import React from \"react\";\n\nconst BarChartYAxis = ({\n  wrapperHeight,\n  yStart,\n  yEnd,\n  xPosition,\n  axisObject,\n  axisTitle,\n}) => {\n  return (\n    <>\n      {/* axis line */}\n      <path\n        d={`M ${xPosition} ${yStart} V ${yEnd}`}\n        stroke=\"currentColor\"\n        strokeWidth=\"1\"\n      />\n\n      {/* ticks */}\n      {axisObject.map(({ value, offset }) => {\n        return (\n          <g key={value} transform={`translate(0, ${offset})`}>\n            <line x1=\"45\" x2={xPosition} y={value} stroke=\"black\" />\n            <text className=\"axis-tick-text y-axis-tick-text\" key={value}>\n              {value}\n            </text>\n          </g>\n        );\n      })}\n\n      {/* axis title */}\n      <text\n        transform={`translate(${xPosition - 40}, ${\n          wrapperHeight / 2\n        }) rotate(270)`}\n      >\n        {axisTitle}\n      </text>\n    </>\n  );\n};\n\nexport default BarChartYAxis;\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport { sum } from \"lodash\";\nimport BarChartXAxis from \"./BarChartXAxis\";\nimport BarChartYAxis from \"./BarChartYAxis\";\n\nconst BarChart = ({\n  data,\n  chromosomes,\n  wrapperWidth,\n  wrapperHeight,\n  title,\n  pathLevels,\n  colourMap,\n  leftOffset,\n  selectedChrom,\n}) => {\n  // sizing\n  const margin = {\n    top: 25,\n    right: 0,\n    bottom: 35,\n    left: leftOffset,\n  };\n  const boundsWidth = wrapperWidth - margin.left - margin.right;\n  const boundsHeight = wrapperHeight - margin.top - margin.bottom;\n\n  // get total # variants per chromosome\n  const chromosomeTotals = data.map((d) =>\n    sum(pathLevels.map((l) => parseInt(d[l])))\n  );\n\n  // stack data\n  const stack = d3.stack().keys(pathLevels)(data);\n\n  // scales\n  const xScale = d3\n    .scaleBand()\n    .domain(chromosomes)\n    .range([margin.left, boundsWidth + margin.left])\n    .padding([0.15]);\n  const yScale = d3\n    .scaleLinear()\n    .domain([0, Math.max(...chromosomeTotals)])\n    .range([boundsHeight + margin.top, margin.top]);\n  const colourRange = pathLevels.map((t) => colourMap[t]);\n  const colourScale = d3.scaleOrdinal().domain(pathLevels).range(colourRange);\n\n  // axes\n  const xAxis = chromosomes.map((c, i) => ({\n    value: c,\n    offset: xScale.step() * i,\n  }));\n  const yAxis = yScale\n    .ticks()\n    .map((value) => ({ value, offset: yScale(value) }));\n\n  return (\n    <svg width={wrapperWidth} height={wrapperHeight}>\n      {/* chart title */}\n      <text\n        transform={`translate(${wrapperWidth / 2}, ${margin.top / 2})`}\n        className=\"chart-title\"\n      >\n        {title}\n      </text>\n\n      {/* bars */}\n      {stack.map((s, i) =>\n        s.map((d) => {\n          // place border around selected chromosome\n          let strokeDashArray;\n          if (d.data.Chromosome !== selectedChrom) {\n            strokeDashArray = null;\n          } else {\n            const presentPathLevels = pathLevels\n              .map((l) => d.data[l])\n              .filter((d) => d !== \"0\");\n            if (i === presentPathLevels.length - 1) {\n              // border on top and sides\n              strokeDashArray = [\n                xScale.bandwidth() + 2,\n                0,\n                yScale(d[0]) - yScale(d[1]) - 2,\n                xScale.bandwidth(),\n                yScale(d[0]) - yScale(d[1]) + 2,\n                0,\n              ];\n            } else {\n              // border on sides\n              strokeDashArray = [\n                0,\n                xScale.bandwidth(),\n                yScale(d[0]) - yScale(d[1]),\n                0,\n              ];\n            }\n          }\n\n          return (\n            <rect\n              key={`${d.data.Chromosome} ${d.data.ClinicalSignificance}`}\n              width={xScale.bandwidth()}\n              x={xScale(d.data.Chromosome)}\n              y={yScale(d[1])}\n              height={yScale(d[0]) - yScale(d[1])}\n              fill={colourScale(pathLevels[i])}\n              stroke={d.data.Chromosome === selectedChrom ? \"black\" : null}\n              strokeWidth=\"2px\"\n              strokeDasharray={strokeDashArray}\n            />\n          );\n        })\n      )}\n\n      <BarChartXAxis\n        wrapperWidth={wrapperWidth}\n        wrapperHeight={wrapperHeight}\n        xStart={margin.left}\n        xEnd={margin.left + boundsWidth}\n        yPosition={margin.top + boundsHeight}\n        stepSize={xScale.step()}\n        axisObject={xAxis}\n        axisTitle=\"Chromosome\"\n      />\n\n      <BarChartYAxis\n        wrapperHeight={wrapperHeight}\n        yStart={margin.top}\n        yEnd={margin.top + boundsHeight}\n        xPosition={margin.left}\n        axisObject={yAxis}\n        axisTitle=\"# of Variants\"\n      />\n    </svg>\n  );\n};\n\nexport default BarChart;\n","import React, { useEffect, useMemo, useRef } from \"react\";\nimport { GoslingComponent, validateGoslingSpec } from \"gosling.js\";\n\nconst GenomePlots = ({\n  width,\n  selectedChrom,\n  pathLevels,\n  colourMap,\n  selectedLevels,\n}) => {\n  const gosRef = useRef(null);\n\n  const spec = useMemo(\n    () => ({\n      spacing: 10,\n      views: [\n        {\n          static: true,\n          layout: \"circular\",\n          centerRadius: 0.5,\n          tracks: [\n            //All events\n            {\n              alignment: \"overlay\",\n              style: { background: \"lightgray\", backgroundOpacity: 0.2 },\n              data: {\n                url: \"https://raw.githubusercontent.com/armtsf/tmp/main/all_hg.csv\",\n                type: \"csv\",\n                chromosomeField: \"CHROM\",\n                genomicFields: [\"POS\", \"END\"],\n              },\n              mark: \"rect\",\n              color: {\n                field: \"TYPE\",\n                type: \"nominal\",\n                domain: [\"DEL\", \"INS\"],\n                range: [\"#BDBDBD\", \"#636363\"],\n              },\n              x: { field: \"POS\", type: \"genomic\" },\n              //xe: { field: \"END\", type: \"genomic\" },\n              stroke: { value: colourMap[\"All variants\"] },\n              strokeWidth: { value: 1 },\n              width,\n              height: 10,\n              tracks: [\n                { mark: \"rect\" },\n                {\n                  mark: \"brush\",\n                  x: { linkingId: \"detail\" },\n                  color: { value: \"steelBlue\" },\n                },\n              ],\n            },\n\n            //Insertions and deletions\n            {\n              alignment: \"overlay\",\n              tracks: [\n                //Events\n                {\n                  data: {\n                    url: \"/CPSC_547_Structural_Variants/data/allmatched_clean.tsv\",\n                    type: \"csv\",\n                    separator: \"\\t\",\n                    chromosomeField: \"CHROM\",\n                    genomicFields: [\"POS\", \"END\"],\n                  },\n                  dataTransform: [\n                    {\n                      type: \"filter\",\n                      field: \"ClinicalSignificance\",\n                      oneOf: selectedLevels,\n                    },\n                  ],\n                  mark: \"rect\",\n                  color: {\n                    field: \"ClinicalSignificance\",\n                    type: \"nominal\",\n                    domain: pathLevels,\n                    range: pathLevels.map((l) => colourMap[l]),\n                  },\n                  x: { field: \"POS\", type: \"genomic\" },\n                  //xe: { field: \"END\", type: \"genomic\" },\n                  stroke: {\n                    field: \"ClinicalSignificance\",\n                    type: \"nominal\",\n                    domain: pathLevels,\n                    range: pathLevels.map((l) => colourMap[l]),\n                  },\n                  strokeWidth: { value: 1 },\n                  tracks: [\n                    { mark: \"rect\" },\n                    {\n                      mark: \"brush\",\n                      x: { linkingId: \"detail\" },\n                      color: { value: \"steelBlue\" },\n                    },\n                  ],\n                },\n\n                //Links\n                {\n                  alignment: \"overlay\",\n                  data: {\n                    type: \"csv\",\n                    url: \"https://raw.githubusercontent.com/armtsf/tmp/main/matched-new.csv\",\n                    separator: \"\\t\",\n                    genomicFieldsToConvert: [\n                      {\n                        chromosomeField: \"chr1\",\n                        genomicFields: [\"p1s\", \"p1e\"],\n                      },\n                      {\n                        chromosomeField: \"chr2\",\n                        genomicFields: [\"p2s\", \"p2e\"],\n                      },\n                    ],\n                  },\n                  dataTransform: [\n                    {\n                      type: \"filter\",\n                      field: \"ClinicalSignificance\",\n                      oneOf: selectedLevels,\n                    },\n                  ],\n                  mark: \"withinLink\",\n                  x: { field: \"p1s\", type: \"genomic\" },\n                  xe: { field: \"p1e\", type: \"genomic\" },\n                  x1: { field: \"p2s\", type: \"genomic\" },\n                  x1e: { field: \"p2e\", type: \"genomic\" },\n                  stroke: {\n                    field: \"ClinicalSignificance\",\n                    type: \"nominal\",\n                    domain: pathLevels,\n                    range: pathLevels.map((l) => colourMap[l]),\n                  },\n                  strokeWidth: { value: 1 },\n                },\n              ],\n              width,\n              height: 30,\n            },\n          ],\n        },\n        {\n          spacing: 10,\n          arrangement: \"horizontal\",\n          // linear track\n          tracks: [\n            {\n              id: \"linear-track\",\n              data: {\n                type: \"csv\",\n                separator: \"\\t\",\n                url: \"CPSC_547_Structural_Variants/data/allmatched_clean.tsv\",\n                chromosomeField: \"CHROM\",\n                genomicFields: [\"POS\", \"END\"],\n              },\n              dataTransform: [\n                {\n                  type: \"filter\",\n                  field: \"ClinicalSignificance\",\n                  oneOf: selectedLevels,\n                },\n              ],\n              mark: \"rect\",\n              x: {\n                field: \"POS\",\n                type: \"genomic\",\n                linkingId: \"detail\",\n              },\n              xe: {\n                field: \"END\",\n                type: \"genomic\",\n              },\n              color: {\n                field: \"ClinicalSignificance\",\n                type: \"nominal\",\n                domain: pathLevels,\n                range: pathLevels.map((l) => colourMap[l]),\n              },\n              stroke: {\n                field: \"ClinicalSignificance\",\n                type: \"nominal\",\n                domain: pathLevels,\n                range: pathLevels.map((l) => colourMap[l]),\n              },\n              strokeWidth: { value: 3 },\n              width,\n              height: 100,\n              tooltip: [\n                { field: \"POS\", type: \"genomic\", alt: \"Start Position\" },\n                { field: \"END\", type: \"genomic\", alt: \"End Position\" },\n                {\n                  field: \"SVTYPE\",\n                  type: \"nominal\",\n                  alt: \"SV Type\",\n                },\n                {\n                  field: \"ClinicalSignificance\",\n                  type: \"nominal\",\n                  alt: \"Clinical Significance\",\n                },\n                {\n                  field: \"Similarity\",\n                  type: \"continuous\",\n                  alt: \"Similarity\",\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    }),\n    [width, colourMap, pathLevels, selectedLevels]\n  );\n\n  useEffect(() => {\n    if (\n      !(\n        gosRef.current &&\n        gosRef.current.api.getViewIds().includes(\"linear-track\")\n      )\n    )\n      return;\n\n    if (selectedChrom) {\n      gosRef.current.api.zoomTo(\"linear-track\", `chr${selectedChrom}`);\n    } else {\n      gosRef.current.api.zoomToExtent(\"linear-track\");\n    }\n  }, [selectedChrom]);\n\n  const validity = validateGoslingSpec(spec);\n  if (validity.state === \"error\") {\n    console.warn(\"Gosling spec is invalid!\", validity.messages);\n    return;\n  }\n\n  return (\n    <GoslingComponent\n      spec={spec}\n      padding={0}\n      ref={gosRef}\n      experimental={{ reactive: true }}\n    />\n  );\n};\n\nexport default GenomePlots;\n","import React from \"react\";\n\nconst Legend = ({ colourMap }) => {\n  const categories = Object.keys(colourMap);\n\n  return (\n    <div>\n      <h3 className=\"text-center\">Clinical Significance</h3>\n      <div className=\"legend-colours sidebar-margin-left\">\n        {categories.map((l) => {\n          return (\n            <div className=\"legend-element\" key={l}>\n              <div\n                style={{ background: colourMap[l] }}\n                className=\"legend-bubble\"\n              ></div>\n              <p>{l}</p>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Legend;\n","import React from \"react\";\n\nconst hexToRgb = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  const r = parseInt(result[1], 16);\n  const g = parseInt(result[2], 16);\n  const b = parseInt(result[3], 16);\n\n  return [r, g, b];\n};\n\nconst ClinicalSignificance = ({ value, colourMap }) => {\n  const backgroundColor = colourMap[value];\n  const [r, g, b] = hexToRgb(backgroundColor);\n\n  return (\n    <td>\n      <p\n        style={{ backgroundColor: `rgba(${r}, ${g}, ${b}, 0.75)` }}\n        className=\"clinical-significance\"\n      >\n        {value}\n      </p>\n    </td>\n  );\n};\n\nexport default ClinicalSignificance;\n","import React from \"react\";\n\nconst Similarity = ({ value }) => {\n  return (\n    <td>\n      <div\n        style={{ width: `${value}%`, backgroundColor: \"grey\", height: \"1.375em\" }}\n        className=\"similarity\"\n      ></div>\n    </td>\n  );\n};\n\nexport default Similarity;\n","import React from \"react\";\nimport { indexOf } from \"lodash\";\nimport { useTable, usePagination, useSortBy } from \"react-table\";\nimport ClinicalSignificance from \"./ClinicalSignificance\";\nimport Select from \"react-select\";\nimport Similarity from \"./Similarity\";\n\nconst pageSelectOptions = [10, 20, 30].map((c) => ({\n  value: c,\n  label: `Show ${c}`,\n}));\n\nconst MatchTable = ({ columns, data, colourMap, pathLevels }) => {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex },\n  } = useTable(\n    {\n      columns,\n      data,\n      disableMultiSort: false,\n      initialState: { pageIndex: 0 },\n    },\n    useSortBy,\n    usePagination\n  );\n\n  return (\n    <div className=\"container match-table-container\">\n      <h2>HG002 Matches</h2>\n      <table {...getTableProps()} className=\"match-table\">\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render(\"Header\")}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? \" 🔽\"\n                        : \" 🔼\"\n                      : \"\"}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  if (cell.column.id === \"ClinicalSignificance\")\n                    return (\n                      <ClinicalSignificance\n                        key={cell.value}\n                        value={cell.value}\n                        colourMap={colourMap}\n                      />\n                    );\n                  if (cell.column.id === \"Similarity\") {\n                    return <Similarity key={cell.value} value={cell.value} />;\n                  }\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <div className=\"match-table-controls\">\n        <button\n          onClick={() => gotoPage(0)}\n          disabled={!canPreviousPage}\n          className=\"match-table-button\"\n        >\n          {\"<<\"}\n        </button>\n        <button\n          onClick={() => previousPage()}\n          disabled={!canPreviousPage}\n          className=\"match-table-button\"\n        >\n          {\"<\"}\n        </button>\n        <button\n          onClick={() => nextPage()}\n          disabled={!canNextPage}\n          className=\"match-table-button\"\n        >\n          {\">\"}\n        </button>\n        <button\n          onClick={() => gotoPage(pageCount - 1)}\n          disabled={!canNextPage}\n          className=\"match-table-button\"\n        >\n          {\">>\"}\n        </button>\n        <span>\n          Page{\" \"}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>\n        </span>\n        <span className=\"match-table-jump-to\">Go to page: </span>\n        <input\n          type=\"number\"\n          defaultValue={pageIndex + 1}\n          onChange={(e) => {\n            const page = e.target.value ? Number(e.target.value) - 1 : 0;\n            gotoPage(page);\n          }}\n        />\n        <Select\n          options={pageSelectOptions}\n          onChange={(e) => setPageSize(e.value)}\n          defaultValue={{ value: 10, label: \"Show 10\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MatchTable;\n","// calculates dimensions with respect to the width and max width\n// of the main container\nexport const getDimensions = (proportion) => {\n  const containerWidth = 0.9;\n  const maxWidth = 1400;\n  const calcWidth = window.innerWidth * containerWidth * proportion;\n  const maxWidthAllowed = maxWidth * containerWidth * proportion;\n\n  // calculated width is larger than the max width allowed\n  if (calcWidth > maxWidthAllowed) {\n    return maxWidthAllowed;\n  }\n\n  return calcWidth;\n};\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { range, indexOf, sortBy } from \"lodash\";\nimport BarChart from \"./components/BarChart\";\nimport GenomePlots from \"./components/GenomePlots\";\nimport Legend from \"./components/Legend\";\nimport MatchTable from \"./components/MatchTable\";\nimport Select from \"react-select\";\nimport { getDimensions } from \"./utils/getDimensions\";\n\n// dimensions:\n// main container = 90% width\n// circos / linear track = 60% width of main\n// bar charts / hover details = 40% width of main\n// see index.css\n\nconst chromosomes = range(1, 23)\n  .map((c) => `${c}`)\n  .concat([\"X\", \"Y\"]);\n\nconst chromOptions = [{ value: null, label: \"All\" }];\nfor (const chrom of chromosomes) {\n  chromOptions.push({ value: chrom, label: `Chromosome ${chrom}` });\n}\n\nconst pathLevels = [\n  \"Uncertain significance\",\n  \"Benign\",\n  \"Likely pathogenic\",\n  \"Pathogenic\",\n];\n\nconst colourMap = {\n  \"All variants\": \"#818589\",\n  \"Uncertain significance\": \"#0092D0\",\n  Benign: \"#4dac26\",\n  \"Likely pathogenic\": \"#eb95df\",\n  Pathogenic: \"#d01c8b\",\n};\n\nfunction App() {\n  const [clinvarSummary, setClinvarSummary] = useState([]);\n  const [matchSummary, setMatchSummary] = useState([]);\n  const [matchData, setMatchData] = useState(null);\n  const [selectedChrom, setSelectedChrom] = useState(null);\n  const [selectedLevels, setSelectedLevels] = useState(pathLevels);\n\n  const [tableLoading, setTableLoading] = useState(true);\n\n  const [circosWidth, setCircosWidth] = useState(getDimensions(0.6));\n  const [barChartDims, setBarChartDims] = useState({\n    wrapperWidth: getDimensions(0.4),\n    wrapperHeight: getDimensions(0.4 * 0.5),\n  });\n\n  // fetch clinvar summary\n  useEffect(() => {\n    const fetchData = async () => {\n      const d = await d3.tsv(\n        \"/CPSC_547_Structural_Variants/data/clinvar_counts_by_chromosome.tsv\"\n      );\n\n      // remove MT chromosome\n      const variants = d.filter((v) => chromosomes.includes(v.Chromosome));\n      setClinvarSummary(variants);\n    };\n\n    fetchData();\n  }, []);\n\n  // fetch match summary\n  useEffect(() => {\n    const fetchData = async () => {\n      const d = await d3.tsv(\n        \"/CPSC_547_Structural_Variants/data/hg002_matches_counts_by_chromosome.tsv\"\n      );\n      setMatchSummary(d);\n    };\n\n    fetchData();\n  }, []);\n\n  // fetch match details by selected chromosome\n  useEffect(() => {\n    const fetchData = async () => {\n      setTableLoading(true);\n      const d = await d3.tsv(\n        \"/CPSC_547_Structural_Variants/data/allmatched_clean.tsv\"\n      );\n      const filteredData = d.filter((v) =>\n        selectedLevels.includes(v.ClinicalSignificance)\n      );\n\n      if (selectedChrom) {\n        const matches = filteredData.filter((v) => v.CHROM === selectedChrom);\n        setMatchData(matches);\n      } else {\n        setMatchData(filteredData);\n      }\n\n      setTableLoading(false);\n    };\n\n    fetchData();\n  }, [selectedChrom, selectedLevels]);\n\n  // listen for resize events\n  useEffect(() => {\n    const handleResize = () => {\n      setCircosWidth(\n        0.54 * window.innerWidth > 756 ? 756 : 0.54 * window.innerWidth\n      );\n      setBarChartDims({\n        wrapperWidth:\n          0.36 * window.innerWidth > 540 ? 540 : 0.36 * window.innerWidth,\n        wrapperHeight:\n          0.2 * window.innerWidth > 224 ? 224 : 0.2 * window.innerWidth,\n      });\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  const sortClinicalSignificance = useMemo(\n    () => (rowA, rowB, columnId, desc) => {\n      if (\n        indexOf(pathLevels, rowA.original[columnId]) >\n        indexOf(pathLevels, rowB.original[columnId])\n      ) {\n        return 1;\n      }\n      return -1;\n    },\n    []\n  );\n\n  const sortChromosome = useMemo(\n    () => (rowA, rowB, columnId, desc) => {\n      if (\n        indexOf(chromosomes, rowA.original[columnId]) >\n        indexOf(chromosomes, rowB.original[columnId])\n      ) {\n        return 1;\n      }\n      return -1;\n    },\n    []\n  );\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Chr\",\n        accessor: \"CHROM\",\n        sortType: sortChromosome,\n      },\n      {\n        Header: \"Position\",\n        accessor: \"POS\",\n      },\n      {\n        Header: \"Type\",\n        accessor: \"SVTYPE\",\n      },\n      {\n        Header: \"Clinical Significance\",\n        accessor: \"ClinicalSignificance\",\n        sortType: sortClinicalSignificance,\n      },\n      {\n        Header: \"Similarity\",\n        accessor: \"Similarity\",\n      },\n      {\n        Header: \"Allele ID\",\n        accessor: \"AlleleID\",\n        disableSortBy: true,\n      },\n      {\n        Header: \"Associated Phenotypes\",\n        accessor: \"PhenotypeList\",\n        disableSortBy: true,\n      },\n      {\n        Header: \"Gene\",\n        accessor: \"HGNC_ID\",\n        disableSortBy: true,\n      },\n    ],\n    []\n  );\n\n  const handleSelectedChromChange = (e) => {\n    setSelectedChrom(e.value);\n  };\n\n  const checkLevelSelected = (level) => {\n    return selectedLevels.includes(level);\n  };\n\n  const toggleLevelSelected = (e, level) => {\n    const selected = selectedLevels.includes(level);\n    if (selected) {\n      const newLevels = selectedLevels.filter((l) => l !== level);\n      setSelectedLevels(newLevels);\n    } else {\n      const newLevels = selectedLevels.concat(level);\n\n      // maintain constant order of pathogenicity levels\n      const orderedLevels = sortBy(newLevels, (o) => indexOf(pathLevels, o));\n      setSelectedLevels(orderedLevels);\n    }\n  };\n\n  return (\n    <>\n      <h1>Structural Variant Pathogenicity</h1>\n\n      <main className=\"container dashboard\">\n        <GenomePlots\n          width={circosWidth}\n          selectedChrom={selectedChrom}\n          selectedLevels={selectedLevels}\n          pathLevels={pathLevels}\n          colourMap={colourMap}\n        />\n        <section className=\"side\">\n          <Legend colourMap={colourMap} />\n          <div className=\"sidebar-margin-left\">\n            <div className=\"select-levels\">\n              <h3>Select Pathogenicity</h3>\n              {pathLevels.map((l) => (\n                <label key={l}>\n                  <input\n                    type=\"checkbox\"\n                    checked={checkLevelSelected(l)}\n                    onChange={(e) => toggleLevelSelected(e, l)}\n                  />\n                  {l}\n                </label>\n              ))}\n            </div>\n            <h3>Navigate to Chromosome</h3>\n            <Select\n              options={chromOptions}\n              defaultValue={{ value: null, label: \"All\" }}\n              onChange={handleSelectedChromChange}\n            />\n          </div>\n          {clinvarSummary.length > 0 && (\n            <BarChart\n              data={clinvarSummary}\n              chromosomes={chromosomes}\n              pathLevels={selectedLevels}\n              colourMap={colourMap}\n              title=\"ClinVar Variants\"\n              wrapperWidth={barChartDims.wrapperWidth}\n              wrapperHeight={barChartDims.wrapperHeight}\n              leftOffset={50}\n              selectedChrom={selectedChrom}\n            />\n          )}\n          {matchSummary.length > 0 && (\n            <BarChart\n              data={matchSummary}\n              chromosomes={chromosomes}\n              pathLevels={selectedLevels}\n              colourMap={colourMap}\n              title=\"HG002 Matches\"\n              wrapperWidth={barChartDims.wrapperWidth}\n              wrapperHeight={barChartDims.wrapperHeight}\n              leftOffset={50}\n              selectedChrom={selectedChrom}\n            />\n          )}\n        </section>\n      </main>\n      {tableLoading ? (\n        <p className=\"text-center\">Loading matches...</p>\n      ) : (\n        <MatchTable\n          columns={columns}\n          data={matchData}\n          colourMap={colourMap}\n          pathLevels={pathLevels}\n        />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}